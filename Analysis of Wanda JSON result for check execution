# Analysis of Wanda JSON result for check execution

> :exclamation: This superficial analysis is done by experimenting and comparing the results of executing multiple checks on multiple hosts with different outcomes and not by reading the Wanda documentation thoroughly. 

Independent if one or multiple hosts or checks are executed, Wanda always returns one result object:

```
{
    "timeout": [],
    "status": "completed",
    "started_at": "2024-04-12T13:25:53.201439Z",
    "result": "passing",
    "targets": [...],
    "execution_id": "25217bdf-0553-430d-b57d-b2ead8f546ef",
    "group_id": "13bf3f41-45eb-467b-a2f1-15cfcc6e9d20",
    "warning_count": 0,
    "passing_count": 1,
    "critical_count": 0,
    "completed_at": "2024-04-12T13:25:58.259106Z",
    "check_results": [...]
  }
```

The `result` is the **"most negative"** result of **all** executed checks, meaning one failing of many is enough to get the (overall) status tu be critical.
Depending on the use case `result` is useful or not.

Both `execution_id` and `group_id` are arbitrary to distinguish executions in the database.

`warning_count`, `passing_count` and `critical_count` give an impression, how many checks passed, failed or warned.

`targets` is a list containing **one object per host**:
```
{
    "agent_id": "b651491b-904d-5448-9350-fe817c1f2c6e",
    "checks": [ "3A9890", "DC5429" ]
},
```

`check_results` is a list with **one object per check**:
```
    {
      "agents_check_results": [...],
      "check_id": "3A9890",
      "expectation_results": [...],
      "result": "passing"
    },
```

`check_results[].result` contains **the most negative** result for the check on **all** hosts.

`check_results[].agents_check_results` is a list of result objects, one per host:

```
        {
          "agent_id": "7a585545-d453-5d61-bcb2-c6df446e1876",
          "expectation_evaluations": [
            {
              "name": "overrides_identical",
              "return_value": {},
              "type": "expect_same"
              # ONLY ON ERROR 'failure_message': "Corosync 'token' timeout value was expected to be '30000' but configured value is '5000'"
            }
          ],
          # ONLY ON ERROR: "message": "Fact gathering error occurred during the execution",
          "facts": [
            {
              "check_id": "3A9890",
              "name": "saptune_note_verify",
              "value": {...}
            }
          ],
          "values": []
        },
```

`check_results[].agents_check_results[].expectation_evaluations` is a list of evaluation objects, but always contains only one object:
```

              {
                "name": "systemd_state_running",
                "return_value": "passing",
                "type": "expect_enum"
              }
```
`check_results[].agents_check_results[].expectation_evaluations[].return_value` can have multiple values, ranging from strings, dicts, booleans, etc.

`check_results[].agents_check_results[].expectation_evaluations[].type` can have multiple values depending on the check.

`check_results[].agents_check_results[].facts` is list of gathered facts contains a list of facts objects, although the list seems always to have one object only.
In general it is a repetition of the `check_id` and gathered facts on the host.

In case of an error `check_results[].agents_check_results[].message` exists with an error text. In such a case `check_results[].agents_check_results[].facts.message` and `check_results[].agents_check_results[].expectation_evaluations[].failure_message` exist as well and contains an additional error text.

`check_results[].expectation_results` is list of result objects with one object per check:
```
          {
            "name": "systemd_state_running",
            "result": "passing",
            "type": "expect_enum"
          }
```
If an error has occurred (`check_results[].agents_check_results[].message` exists), the object is empty.

The `check_results[].expectation_results.result` can have multiple multiple values, ranging from strings, booleans, etc. and is the "most negative" result of all hosts this check run.


## Findings

- If one check is executed on one host, each occurrence of `result` (`result`, `check_results[].result`) is identical, and can be used.

- If multiple checks on one host are executed, `check_results[].result` of each `check_results` object can be used, because each of the checks has its own `check_results` object.

- If one or multiple checks on multiple hosts are executed, no occurrence of `result` is distinct, since a `check_results` object combines multiple hosts and the "most negative" result is taken.  Only `check_results[].agents_check_results[].expectation_evaluations.return_value` shows the real result of a check on a specific host in such a case.
  With having a range of values and data types it must be evaluated to get a `passing`, `warning` or `critical`.

- In case of an errors `check_results[].agents_check_results[].message` and `check_results[].agents_check_results[].facts.message` exist amd contain additional error messages.